import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
import datetime
import random
import string

class User:
    _id_counter = 1

    def __init__(self, username, email):
        self.id = User._id_counter
        User._id_counter += 1
        self.username = username
        self.email = email
        self.friends = set()
        self.posts = []
        self.notifications = []

    def add_friend(self, other_user):
        if other_user == self:
            print("Cannot add yourself as a friend.")
            return
        self.friends.add(other_user)
        other_user.friends.add(self)
        self.notify(f"You are now friends with {other_user.username}.")
        other_user.notify(f"You are now friends with {self.username}.")

    def notify(self, message):
        timestamp = datetime.datetime.now()
        self.notifications.append((timestamp, message))

    def create_post(self, content):
        post = Post(author=self, content=content)
        self.posts.append(post)
        return post

    def __repr__(self):
        return f"User({self.username}, id={self.id})"

    def show_notifications(self):
        print(f"Notifications for {self.username}:")
        for ts, msg in self.notifications:
            print(f"[{ts.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

class Post:
    _id_counter = 1

    def __init__(self, author, content):
        self.id = Post._id_counter
        Post._id_counter += 1
        self.author = author
        self.content = content
        self.timestamp = datetime.datetime.now()
        self.comments = []
        self.likes = set()

    def add_comment(self, user, comment_text):
        comment = Comment(user, comment_text, self)
        self.comments.append(comment)
        self.author.notify(f"{user.username} commented on your post #{self.id}")
        return comment

    def add_like(self, user):
        if user in self.likes:
            print(f"{user.username} already liked post #{self.id}")
        else:
            self.likes.add(user)
            self.author.notify(f"{user.username} liked your post #{self.id}")

    def __repr__(self):
        return (f"Post(id={self.id}, author={self.author.username}, "
                f"content={self.content[:20]!r}..., likes={len(self.likes)}, "
                f"comments={len(self.comments)})")

class Comment:
    _id_counter = 1

    def __init__(self, user, content, post):
        self.id = Comment._id_counter
        Comment._id_counter += 1
        self.user = user
        self.content = content
        self.post = post
        self.timestamp = datetime.datetime.now()

    def __repr__(self):
        return (f"Comment(id={self.id}, user={self.user.username}, "
                f"content={self.content[:20]!r}...)")

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def register_user(self, username, email):
        if username in self.users:
            print(f"Username {username} already taken.")
            return None
        user = User(username, email)
        self.users[username] = user
        print(f"User {username} registered.")
        return user

    def find_user(self, username):
        return self.users.get(username)

    def add_friendship(self, username1, username2):
        user1 = self.find_user(username1)
        user2 = self.find_user(username2)
        if not user1 or not user2:
            print("One or both users not found.")
            return
        user1.add_friend(user2)

    def search_posts(self, keyword):
        print(f"Searching posts containing '{keyword}'...")
        results = []
        for user in self.users.values():
            for post in user.posts:
                if keyword.lower() in post.content.lower():
                    results.append(post)
        return results

    def show_all_users(self):
        print("Registered users:")
        for user in self.users.values():
            print(user)

    def simulate_activity(self):
        print("Simulating random user activity...")
        users_list = list(self.users.values())
        if not users_list:
            print("No users to simulate.")
            return

        for _ in range(20):
            user = random.choice(users_list)
            action = random.choice(['post', 'comment', 'like', 'friend'])
            if action == 'post':
                content = ''.join(random.choices(string.ascii_letters + " ", k=50))
                post = user.create_post(content)
                print(f"{user.username} created post #{post.id}")
            elif action == 'comment':
                if user.posts:
                    post = random.choice(user.posts)
                    comment_text = "Nice post!"
                    comment = post.add_comment(user, comment_text)
                    print(f"{user.username} commented on post #{post.id}")
            elif action == 'like':
                # Like a random post from friends or random users
                possible_posts = []
                for friend in user.friends:
                    possible_posts.extend(friend.posts)
                if not possible_posts:
                    possible_posts = [post for u in users_list for post in u.posts]
                if possible_posts:
                    post = random.choice(possible_posts)
                    post.add_like(user)
                    print(f"{user.username} liked post #{post.id}")
            elif action == 'friend':
                potential_friends = [u for u in users_list if u != user and u not in user.friends]
                if potential_friends:
                    new_friend = random.choice(potential_friends)
                    user.add_friend(new_friend)
                    print(f"{user.username} became friends with {new_friend.username}")

def main():
    sn = SocialNetwork()

    # Register some users
    alice = sn.register_user("alice", "alice@example.com")
    bob = sn.register_user("bob", "bob@example.com")
    carol = sn.register_user("carol", "carol@example.com")

    # Make friends
    sn.add_friendship("alice", "bob")
    sn.add_friendship("alice", "carol")

    # Users create posts
    post1 = alice.create_post("Hello world! This is Alice's first post.")
    post2 = bob.create_post("Bob here. Loving this social network simulator.")
    post3 = carol.create_post("Carol's day was great! Had a nice walk.")

    # Add comments
    post1.add_comment(bob, "Welcome Alice!")
    post1.add_comment(carol, "Hi Alice, nice to see you here.")
    post2.add_comment(alice, "Glad you like it, Bob!")

    # Add likes
    post1.add_like(bob)
    post1.add_like(carol)
    post2.add_like(alice)

    # Show notifications
    alice.show_notifications()
    bob.show_notifications()
    carol.show_notifications()

    # Search posts
    results = sn.search_posts("alice")
    print("Search results:")
    for post in results:
        print(post)

    # Simulate random activity
    sn.simulate_activity()

if __name__ == "__main__":
    main()
